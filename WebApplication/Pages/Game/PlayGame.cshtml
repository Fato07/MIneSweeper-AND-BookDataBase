@page
@using GameEngine
@using Microsoft.Extensions.Hosting
@model WebApplication.Pages.Game.PlayGameModel


<form method="post">
    <div class="form-check form-check-inline">
        <input class="form-check-input" type="checkbox" id="checkBoxOpen" value="true" name="isChecked"
               @(Model.IsChecked == "true" ? "Checked" : "")>
        <label class="form-check-label" for="checkBoxOpen">Open</label>
    </div>
    <div class="form-check form-check-inline">
        <input class="form-check-input" type="checkbox" id="checkBoxMarked" value="false" name="isChecked"
               @(Model.IsChecked == "true" ? "" : "Checked")>
        <label class="form-check-label" for="checkBoxMarked">Flag</label>
    </div>
</form>
<table class="table-bordered">
    <tbody>
    @for (var boardHeight = 0; boardHeight < Model.GameEngine.BoardHeight; boardHeight++)
    {
        <tr>
            @for (var boardWidth = 0; boardWidth < Model.GameEngine.BoardWidth; boardWidth++)
            {
                <td>
                    <a asp-page="./PlayGame" asp-route-gameId="@Model.GameId"
                       asp-route-yIndex="@boardHeight"
                       asp-route-xIndex="@boardWidth"
                       class="btn btn-dark" name="body" style="width: 50px; height: 50px;">
                        @Html.Raw(GetGameButtonLabel(Model.GameEngine.CellValue(boardHeight, boardWidth)))
                    </a>
                    
                </td>
            }
        </tr>
    }
    </tbody>
</table>
m
<a asp-page="./MainMenu" class="btn btn-primary">Main Menu</a>

@functions
{

    string GetGameButtonLabel(CellStatus status)
    {
        switch (status)
        {
            case CellStatus.ClosedMine:
                return "&nbsp;";
            case CellStatus.FlaggedMine:
                return "F";
            case CellStatus.OpenMine:
                return "*";
            case CellStatus.ClosedAndNotAMine:
                return "&nbsp;";
            case CellStatus.OpenedAndNotAMine:
                return "1";
            case CellStatus.FlaggedAndNotMine:
                return "F";
        }
        return "Z";
    }

}
